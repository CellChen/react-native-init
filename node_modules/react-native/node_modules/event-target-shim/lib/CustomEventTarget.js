"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defineCustomEventTarget = defineCustomEventTarget;

var _commons = require("./commons");

function getAttributeListener(eventTarget, type) {
  var node = eventTarget[_commons.LISTENERS][type];
  while (node != null) {
    if (node.kind === _commons.ATTRIBUTE) {
      return node.listener;
    }
    node = node.next;
  }
  return null;
}

function setAttributeListener(eventTarget, type, listener) {
  if (listener != null && typeof listener !== "function") {
    throw new TypeError("listener should be a function.");
  }

  var prev = null;
  var node = eventTarget[_commons.LISTENERS][type];
  while (node != null) {
    if (node.kind === _commons.ATTRIBUTE) {
      // Remove old value.
      if (prev == null) {
        eventTarget[_commons.LISTENERS][type] = node.next;
      } else {
        prev.next = node.next;
      }
    } else {
      prev = node;
    }

    node = node.next;
  }

  // Add new value.
  if (listener != null) {
    if (prev == null) {
      eventTarget[_commons.LISTENERS][type] = (0, _commons.newNode)(listener, _commons.ATTRIBUTE);
    } else {
      prev.next = (0, _commons.newNode)(listener, _commons.ATTRIBUTE);
    }
  }
}

function defineCustomEventTarget(EventTargetBase, types) {
  function EventTarget() {
    EventTargetBase.call(this);
  }

  var descripter = {
    constructor: {
      value: EventTarget,
      configurable: true,
      writable: true
    }
  };

  types.forEach(function (type) {
    descripter["on" + type] = {
      get: function get() {
        return getAttributeListener(this, type);
      },
      set: function set(listener) {
        setAttributeListener(this, type, listener);
      },
      configurable: true,
      enumerable: true
    };
  });

  EventTarget.prototype = Object.create(EventTargetBase.prototype, descripter);

  return EventTarget;
}